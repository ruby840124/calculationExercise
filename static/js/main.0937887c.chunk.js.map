{"version":3,"sources":["assets/music.mp3","assets/play.svg","assets/stop.svg","assets/player.svg","CDPlayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","playState","audio","CDPlayer","props","addAudio","mp3","document","createElement","src","setState","play","state","pause","this","musicName","author","className","style","animationPlayState","fontSize","fontWeight","backgroundImage","require","React","Component","clockState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,yFCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8ICKrCC,G,kBAAe,CACnBC,WAAW,EACXC,MAAO,OA0EMC,E,kDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,SAAW,WAAO,IACTC,EAAO,EAAKF,MAAZE,IACDJ,EAAQK,SAASC,cAAc,SACrCN,EAAMO,IAAMH,EACZ,EAAKI,SAAS,CAACR,MAAOA,KAlBL,EAqBnBS,KAAO,WAAO,IAAD,EACgB,EAAKC,MAAzBX,EADI,EACJA,UAAWC,EADP,EACOA,MACdD,GACFC,EAAMW,QACN,EAAKH,SAAS,CAACT,WAAW,MAE1BC,EAAMS,OACN,EAAKD,SAAS,CAACT,WAAW,MA1B5B,EAAKW,MAAQZ,EAFI,E,gEAMjBc,KAAKT,a,6CAIWS,KAAKF,MAAdV,MACDW,U,+BAsBE,IACDZ,EAAaa,KAAKF,MAAlBX,UADA,EAEqBa,KAAKV,MAA1BW,EAFA,EAEAA,UAAWC,EAFX,EAEWA,OAClB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,KAAKC,MAAO,CAACC,mBAAoBlB,EAAW,UAAU,WACjE,yBAAKgB,UAAU,cAEnB,yBAAKA,UAAU,WACb,6BACE,yBAAKA,UAAU,eACf,yBAAKA,UAAU,gBAEf,yBAAKA,UAAU,kBAGvB,yBAAKA,UAAU,qBACX,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKC,MAAO,CAACE,SAAS,OAAQC,WAAW,SAAUN,GACnD,6BAAMC,IAER,yBAAKC,UAAU,kBAAkBC,MAAO,CAACI,gBAAiB,OAASC,EAAQ,IAAyB,OAEpG,qCAEF,yBAAKN,UAAU,aAAf,e,GA/DCO,IAAMC,WCLvBzB,G,MAAe,CACnB0B,YAAY,IAkBCC,E,kDAdb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQZ,EAFI,E,qDAOjB,OACE,yBAAKiB,UAAU,OACb,kBAAC,EAAD,CAAUX,IAAMA,IAAKS,UAAY,aAAcC,OAAS,4B,GAV9CQ,IAAMC,WCGJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0937887c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/music.cc723b56.mp3\";","module.exports = __webpack_public_path__ + \"static/media/play.c363353e.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop.a54fda48.svg\";","module.exports = __webpack_public_path__ + \"static/media/player.35d7ffce.svg\";","import React from 'react';\r\nimport './CDPlayer.css';\r\nimport play from './assets/play.svg';\r\nimport stop from './assets/stop.svg';\r\n\r\nconst initialState = {\r\n  playState: false,\r\n  audio: null\r\n};\r\n\r\nclass CDPlayer extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.addAudio();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const {audio} = this.state;\r\n    audio.pause();\r\n  }\r\n\r\n  addAudio = () => {\r\n    const {mp3} = this.props;\r\n    const audio = document.createElement(\"audio\");\r\n    audio.src = mp3;\r\n    this.setState({audio: audio});\r\n  }\r\n\r\n  play = () => {\r\n    const {playState, audio} = this.state;\r\n    if (playState) {\r\n      audio.pause();\r\n      this.setState({playState: false});\r\n    } else {\r\n      audio.play();\r\n      this.setState({playState: true});\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {playState} = this.state;\r\n    const {musicName, author} = this.props;\r\n    return (\r\n        <div className='main'>\r\n            <div className='player'> \r\n                <div className='playerTopBlock'>\r\n                    <div className='CD' style={{animationPlayState: playState? 'running':'paused'}}>\r\n                        <div className='CDCenter'/>\r\n                    </div>\r\n                    <div className='buttons'>\r\n                      <div>\r\n                        <div className='nextButton'/>\r\n                        <div className='lastButton'/>\r\n                      </div>\r\n                        <div className='cycleButton'/>  \r\n                    </div>\r\n                </div>\r\n                <div className='playerBottomBlock'>\r\n                    <div>\r\n                      <div className='adjustBlock'>\r\n                        <div className='musicInfo'>\r\n                          <div style={{fontSize:'24px', fontWeight:'bold'}}>{musicName}</div>\r\n                          <div>{author}</div>\r\n                        </div>\r\n                        <div className='playerComponent' style={{backgroundImage: 'url(' + require('./assets/player.svg') + ')',}}>\r\n                        </div>\r\n                        <div>456</div>\r\n                      </div>\r\n                      <div className='adjustBar'>123</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default CDPlayer;","import React from 'react';\nimport mp3 from './assets/music.mp3';\nimport CDPlayer from './CDPlayer';\nimport './App.css';\n\nconst initialState = {\n  clockState: true\n};\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n\n  render() {\n    return (\n      <div className='App'>\n        <CDPlayer mp3= {mp3} musicName= {'Summertime'} author= {'周杰倫'}/>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}